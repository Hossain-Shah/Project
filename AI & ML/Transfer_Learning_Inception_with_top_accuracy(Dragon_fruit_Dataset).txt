#!/usr/bin/env python
# coding: utf-8

# In[29]:


from tensorflow.compat.v1 import ConfigProto
from tensorflow.compat.v1 import InteractiveSession
config = ConfigProto()
config.gpu_options.per_process_gpu_memory_fraction = 0.5
config.gpu_options.allow_growth = True
session = InteractiveSession(config=config)


# In[30]:


get_ipython().system('nvidia-smi')


# In[31]:


get_ipython().system('pip install tensorflow-gpu')


# **bold text**

# In[32]:


from tensorflow.keras.layers import Input, Lambda, Dense, Flatten
from tensorflow.keras.models import Model
from tensorflow.keras.applications.inception_v3 import InceptionV3
#from keras.applications.vgg16 import VGG16
from tensorflow.keras.applications.inception_v3 import preprocess_input
from tensorflow.keras.preprocessing import image
from tensorflow.keras.preprocessing.image import ImageDataGenerator,load_img
from tensorflow.keras.models import Sequential
import numpy as np
from glob import glob
import matplotlib.pyplot as plt


# In[33]:


IMAGE_SIZE = [224, 224]

train_path = 'E:/Official purpose/Sprint - 12/Final Dragon Data/train'
valid_path = 'E:/Official purpose/Sprint - 12/Final Dragon Data/validation',


# In[34]:


inception = InceptionV3(input_shape=IMAGE_SIZE + [3], weights='imagenet', include_top=False)


# In[35]:


# don't train existing weights
for layer in inception.layers:
    layer.trainable = False


# In[36]:


# useful for getting number of output classes
folders = glob('E:/Official purpose/Sprint - 12/Final Dragon Data/train/*')


# In[37]:


# our layers - you can add more if you want
x = Flatten()(inception.output)


# In[38]:


prediction = Dense(len(folders), activation='softmax')(x)

# create a model object
model = Model(inputs=inception.input, outputs=prediction)


# In[39]:


# view the structure of the model
model.summary()


# In[40]:


# tell the model what cost and optimization method to use
import tensorflow
model.compile(
  loss='categorical_crossentropy',
  optimizer='adam',
  metrics=[tensorflow.keras.metrics.TopKCategoricalAccuracy(k=1)]
)


# In[41]:


# Use the Image Data Generator to import the images from the dataset
from tensorflow.keras.preprocessing.image import ImageDataGenerator

train_datagen = ImageDataGenerator(rescale = 1./255,
                                   shear_range = 0.2,
                                   zoom_range = 0.2,
                                   horizontal_flip = True)

test_datagen = ImageDataGenerator(rescale = 1./255)


# In[42]:


# Make sure you provide the same target size as initialied for the image size
training_set = train_datagen.flow_from_directory('E:/Official purpose/Sprint - 12/Final Dragon Data/train/',
                                                 target_size = (224, 224),
                                                 batch_size = 32,
                                                 class_mode = 'categorical')


# In[43]:


validation_set = test_datagen.flow_from_directory('E:/Official purpose/Sprint - 12/Final Dragon Data/validation/',
                                            target_size = (224, 224),
                                            batch_size = 32,
                                            class_mode = 'categorical')


# In[44]:


# fit the model
# Run the cell. It will take some time to execute
r = model.fit(
  training_set,
  validation_data=validation_set,
  epochs=15,
  steps_per_epoch=len(training_set),
  validation_steps=len(validation_set)
)


# In[45]:


# plot the loss
import tensorflow
plt.plot(r.history['loss'], label='train loss')
plt.plot(r.history['val_loss'], label='val loss')
plt.legend()
plt.show()
plt.savefig('LossVal_loss')

# plot the accuracy
plt.plot(r.history[tensorflow.keras.metrics.TopKCategoricalAccuracy()], label='train acc')
plt.plot(r.history[tensorflow.keras.metrics.ValidationTopKCategoricalAccuracy()], label='val acc')
plt.legend()
plt.show()
plt.savefig('AccVal_acc')


# In[46]:


# save it as a h5 file


from tensorflow.keras.models import load_model

model.save('E:/Official purpose/Sprint - 13/topKaccuracy_dragonfruit_model_inception.h5')


# In[47]:


y_pred = model.predict(validation_set)


# In[20]:


y_pred


# In[21]:


import numpy as np
y_pred = np.argmax(y_pred, axis=1)


# In[22]:


y_pred


# In[23]:


from tensorflow.keras.models import load_model
from tensorflow.keras.preprocessing import image


# In[24]:


model=load_model('E:/Official purpose/Sprint - 13/topKaccuracy_dragonfruit_model_inception.h5')


# In[25]:


img=image.load_img('E:/Official purpose/Sprint - 11/Diseased, rotten Dragon fruit images/Screenshot 2021-07-29 at 16-30-25 Stem Rot Soft Rot Grayblack Spot Stock Photo (Edit Now) 1590538756.png',target_size=(224,224))


# In[26]:


x=image.img_to_array(img)
x


# In[27]:


x.shape


# In[28]:


x=x/255


# In[29]:


import numpy as np
x=np.expand_dims(x,axis=0)
img_data=preprocess_input(x)
img_data.shape


# In[30]:


model.predict(img_data)


# In[31]:


a=np.argmax(model.predict(img_data), axis=1)


# In[32]:


a==1


# In[33]:


import tensorflow as tf


# In[34]:


tf.__version__


# In[ ]:




